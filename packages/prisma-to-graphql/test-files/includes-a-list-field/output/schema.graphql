# generated by prisma-to-graphql

type Mutation {
    Users(
        create: User_CreateInput
        update: User_UpdateInput
        upsert: User_UpsertInput
    ): User_QueryOutput!
    Posts(
        create: Post_CreateInput
        update: Post_UpdateInput
        upsert: Post_UpsertInput
    ): Post_QueryOutput!
}

type Query {
    Users(
        where: User_WhereInput
        orderBy: [User_OrderByInput!]
        cursor: User_WhereUnfilteredUniqueInput
        distinct: [User_DistinctInput!]
        take: Int
    ): User_QueryOutput!
    Posts(
        where: Post_WhereInput
        orderBy: [Post_OrderByInput!]
        cursor: Post_WhereUnfilteredUniqueInput
        distinct: [Post_DistinctInput!]
        take: Int
    ): Post_QueryOutput!
}

scalar DateTime

enum SortOrder {
    asc
    desc
}

enum NullsOrder {
    first
    last
}

enum User_DistinctInput {
    id
    createdAt
    updatedAt
}

enum Post_DistinctInput {
    id
    createdAt
    updatedAt
}

type _AllModels {
    User: User
    Post: Post
}

type User {
    id: String!
    createdAt: DateTime!
    updatedAt: DateTime!
    posts: [Post]!
}

input SortOrderWithNulls {
    sort: SortOrder!
    nulls: NullsOrder
}

type User_QueryOutput {
    # Total count of items based on the provided 'where' argument.
    # This total ignores pagination args so that, when using pagination, you can know how many pages are needed.
    total: Int!
    items: [User!]!
}

input OrderByCount {
    _count: SortOrder
}

input User_WhereInput {
    AND: [User_WhereInput!]
    OR: [User_WhereInput!]
    NOT: [User_WhereInput!]
    id: StringFilterInput
    createdAt: DateTimeFilterInput
    updatedAt: DateTimeFilterInput
    posts: Post_WhereManyInput
}

input User_OrderByInput {
    id: SortOrder
    createdAt: SortOrder
    updatedAt: SortOrder
    posts: OrderByCount
}

input User_WhereUnfilteredUniqueInput {
    AND: [User_WhereInput!]
    OR: [User_WhereInput!]
    NOT: [User_WhereInput!]
    id: String
    createdAt: DateTimeFilterInput
    updatedAt: DateTimeFilterInput
    posts: Post_WhereManyInput
}

input StringFilterInput {
    equals: String
    in: [String!]
    notIn: [String!]
    lt: String
    lte: String
    gt: String
    gte: String
    not: StringFilterInput
    contains: String
    startsWith: String
    endsWith: String
}

input DateTimeFilterInput {
    equals: DateTime
    in: [DateTime!]
    notIn: [DateTime!]
    lt: DateTime
    lte: DateTime
    gt: DateTime
    gte: DateTime
    not: DateTimeFilterInput
}

input User_WhereManyInput {
    every: User_WhereInput
    none: User_WhereInput
    some: User_WhereInput
}

input User_CreateInput {
    data: [User_CreateDataInput!]!
}

input User_UpdateInput {
    data: User_UpdateDataInput!
    where: User_WhereUnfilteredUniqueInput!
}

input User_UpsertInput {
    data: User_UpdateDataInput!
    where: User_WhereRequiredProvidedUniqueInput!
}

input User_WhereRequiredProvidedUniqueInput {
    id: String!
    createdAt: DateTimeFilterInput
    updatedAt: DateTimeFilterInput
    posts: Post_WhereInput
}

input User_CreateDataInput {
    id: String
    createdAt: DateTime
    updatedAt: DateTime
    posts: Post_Without_User_ConnectionManyInput
}

input User_UpdateDataInput {
    id: String
    createdAt: DateTime
    updatedAt: DateTime
    posts: Post_Without_User_ConnectionInput
}

input User_Without_Post_CreateOrConnectInput {
    connect: [User_WhereUnfilteredUniqueInput]!
    create: [User_Without_Post_CreateInput]!
}

input User_Without_Post_CreateInput {
    id: String
    createdAt: DateTime
    updatedAt: DateTime
}

input User_Without_Post_ConnectionManyInput {
    create: [User_Without_Post_CreateInput]
    connectOrCreate: User_Without_Post_CreateOrConnectInput
    connect: [User_WhereUnfilteredUniqueInput]
}

input User_Without_Post_ConnectionInput {
    create: User_Without_Post_CreateInput
    connectOrCreate: User_Without_Post_CreateOrConnectInput
    connect: User_WhereUnfilteredUniqueInput
}

type Post {
    id: String!
    createdAt: DateTime!
    updatedAt: DateTime!
    user: User!
}

type Post_QueryOutput {
    # Total count of items based on the provided 'where' argument.
    # This total ignores pagination args so that, when using pagination, you can know how many pages are needed.
    total: Int!
    items: [Post!]!
}

input Post_WhereInput {
    AND: [Post_WhereInput!]
    OR: [Post_WhereInput!]
    NOT: [Post_WhereInput!]
    id: StringFilterInput
    createdAt: DateTimeFilterInput
    updatedAt: DateTimeFilterInput
    user: User_WhereInput
}

input Post_OrderByInput {
    id: SortOrder
    createdAt: SortOrder
    updatedAt: SortOrder
    user: User_OrderByInput
}

input Post_WhereUnfilteredUniqueInput {
    AND: [Post_WhereInput!]
    OR: [Post_WhereInput!]
    NOT: [Post_WhereInput!]
    id: String
    createdAt: DateTimeFilterInput
    updatedAt: DateTimeFilterInput
    user: User_WhereInput
}

input Post_WhereManyInput {
    every: Post_WhereInput
    none: Post_WhereInput
    some: Post_WhereInput
}

input Post_CreateInput {
    data: [Post_CreateDataInput!]!
}

input Post_UpdateInput {
    data: Post_UpdateDataInput!
    where: Post_WhereUnfilteredUniqueInput!
}

input Post_UpsertInput {
    data: Post_UpdateDataInput!
    where: Post_WhereRequiredProvidedUniqueInput!
}

input Post_WhereRequiredProvidedUniqueInput {
    id: String!
    createdAt: DateTimeFilterInput
    updatedAt: DateTimeFilterInput
    user: User_WhereInput
}

input Post_CreateDataInput {
    id: String
    createdAt: DateTime
    updatedAt: DateTime
    user: User_Without_Post_ConnectionInput!
}

input Post_UpdateDataInput {
    id: String
    createdAt: DateTime
    updatedAt: DateTime
    user: User_Without_Post_ConnectionInput
}

input Post_Without_User_CreateOrConnectInput {
    connect: [Post_WhereUnfilteredUniqueInput]!
    create: [Post_Without_User_CreateInput]!
}

input Post_Without_User_CreateInput {
    id: String
    createdAt: DateTime
    updatedAt: DateTime
}

input Post_Without_User_ConnectionManyInput {
    create: [Post_Without_User_CreateInput]
    connectOrCreate: Post_Without_User_CreateOrConnectInput
    connect: [Post_WhereUnfilteredUniqueInput]
}

input Post_Without_User_ConnectionInput {
    create: Post_Without_User_CreateInput
    connectOrCreate: Post_Without_User_CreateOrConnectInput
    connect: Post_WhereUnfilteredUniqueInput
}