# generated by prisma-to-graphql

type Mutation {
    Users(
        create: User_CreateInput
        update: User_UpdateInput
        upsert: User_UpsertInput
        delete: User_DeleteInput
    ): User_Output!
    Regions(
        create: Region_CreateInput
        update: Region_UpdateInput
        upsert: Region_UpsertInput
        delete: Region_DeleteInput
    ): Region_Output!
    UserPosts(
        create: UserPost_CreateInput
        update: UserPost_UpdateInput
        upsert: UserPost_UpsertInput
        delete: UserPost_DeleteInput
    ): UserPost_Output!
    UserSettings(
        create: UserSettings_CreateInput
        update: UserSettings_UpdateInput
        upsert: UserSettings_UpsertInput
        delete: UserSettings_DeleteInput
    ): UserSettings_Output!
    UserStats(
        create: UserStats_CreateInput
        update: UserStats_UpdateInput
        upsert: UserStats_UpsertInput
        delete: UserStats_DeleteInput
    ): UserStats_Output!
}

type Query {
    Users(
        where: User_WhereInput
        orderBy: [User_OrderByInput!]
        cursor: User_WhereUnfilteredUniqueInput
        distinct: [User_DistinctInput!]
        take: Int
    ): User_Output!
    Regions(
        where: Region_WhereInput
        orderBy: [Region_OrderByInput!]
        cursor: Region_WhereUnfilteredUniqueInput
        distinct: [Region_DistinctInput!]
        take: Int
    ): Region_Output!
    UserPosts(
        where: UserPost_WhereInput
        orderBy: [UserPost_OrderByInput!]
        cursor: UserPost_WhereUnfilteredUniqueInput
        distinct: [UserPost_DistinctInput!]
        take: Int
    ): UserPost_Output!
    UserSettings(
        where: UserSettings_WhereInput
        orderBy: [UserSettings_OrderByInput!]
        cursor: UserSettings_WhereUnfilteredUniqueInput
        distinct: [UserSettings_DistinctInput!]
        take: Int
    ): UserSettings_Output!
    UserStats(
        where: UserStats_WhereInput
        orderBy: [UserStats_OrderByInput!]
        cursor: UserStats_WhereUnfilteredUniqueInput
        distinct: [UserStats_DistinctInput!]
        take: Int
    ): UserStats_Output!
}

scalar DateTime

enum SortOrder {
    asc
    desc
}

enum NullsOrder {
    first
    last
}

enum User_DistinctInput {
    id
    createdAt
    updatedAt
    email
    password
    firstName
    lastName
    role
    phoneNumber
}

enum Region_DistinctInput {
    createdAt
    updatedAt
    regionName
}

enum UserPost_DistinctInput {
    id
    createdAt
    updatedAt
    title
    body
}

enum UserSettings_DistinctInput {
    id
    createdAt
    updatedAt
    receivesMarketingEmails
    canViewReports
}

enum UserStats_DistinctInput {
    id
    createdAt
    updatedAt
    likes
    dislikes
    views
}

type _AllModels {
    User: User
    Region: Region
    UserPost: UserPost
    UserSettings: UserSettings
    UserStats: UserStats
}

type User {
    id: ID!
    createdAt: DateTime!
    updatedAt: DateTime!
    email: String!
    password: String!
    firstName: String
    lastName: String
    role: String
    phoneNumber: String
    settings: UserSettings
    posts: [UserPost]!
    regions: [Region]!
}

input SortOrderWithNulls {
    sort: SortOrder!
    nulls: NullsOrder
}

type User_Output {
    # Total count of items found or modified.
    # This count is not affected by pagination (it always counts all results).
    total: Int!
    items: [User!]!
    messages: [OutputMessage]!
}

type OutputMessage {
    code: String!
    message: String!
    description: String!
}

input OrderByCount {
    _count: SortOrder
}

input User_WhereInput {
    AND: [User_WhereInput!]
    OR: [User_WhereInput!]
    NOT: [User_WhereInput!]
    id: ID_WhereInput
    createdAt: DateTime_WhereInput
    updatedAt: DateTime_WhereInput
    email: String_WhereInput
    password: String_WhereInput
    firstName: String_WhereInput
    lastName: String_WhereInput
    role: String_WhereInput
    phoneNumber: String_WhereInput
    settings: UserSettings_WhereInput
    posts: UserPost_WhereManyInput
    regions: Region_WhereManyInput
}

input User_OrderByInput {
    id: SortOrder
    createdAt: SortOrder
    updatedAt: SortOrder
    email: SortOrder
    password: SortOrder
    firstName: SortOrderWithNulls
    lastName: SortOrderWithNulls
    role: SortOrderWithNulls
    phoneNumber: SortOrderWithNulls
    settings: UserSettings_OrderByInput
    posts: OrderByCount
    regions: OrderByCount
}

input User_WhereUnfilteredUniqueInput {
    AND: [User_WhereInput!]
    OR: [User_WhereInput!]
    NOT: [User_WhereInput!]
    id: String
    createdAt: DateTime_WhereInput
    updatedAt: DateTime_WhereInput
    email: String_WhereInput
    password: String_WhereInput
    firstName: String_WhereInput
    lastName: String_WhereInput
    role: String_WhereInput
    phoneNumber: String_WhereInput
    settings: UserSettings_WhereInput
    posts: UserPost_WhereManyInput
    regions: Region_WhereManyInput
}

input ID_WhereInput {
    equals: ID
    in: [ID!]
    notIn: [ID!]
    lt: ID
    lte: ID
    gt: ID
    gte: ID
    not: ID_WhereInput
    contains: ID
    startsWith: ID
    endsWith: ID
}

input DateTime_WhereInput {
    equals: DateTime
    in: [DateTime!]
    notIn: [DateTime!]
    lt: DateTime
    lte: DateTime
    gt: DateTime
    gte: DateTime
    not: DateTime_WhereInput
}

input String_WhereInput {
    equals: String
    in: [String!]
    notIn: [String!]
    lt: String
    lte: String
    gt: String
    gte: String
    not: String_WhereInput
    contains: String
    startsWith: String
    endsWith: String
}

input User_WhereManyInput {
    every: User_WhereInput
    none: User_WhereInput
    some: User_WhereInput
}

input User_CreateInput {
    data: [User_CreateDataInput!]!
}

input User_UpdateInput {
    data: User_UpdateDataInput!
    where: User_WhereUnfilteredUniqueInput!
}

input User_UpsertInput {
    data: User_UpdateDataInput!
    where: User_WhereRequiredProvidedUniqueInput!
}

input User_DeleteInput {
    where: User_WhereInput!
}

input User_WhereRequiredProvidedUniqueInput {
    id: String!
    createdAt: DateTime_WhereInput
    updatedAt: DateTime_WhereInput
    email: String_WhereInput
    password: String_WhereInput
    firstName: String_WhereInput
    lastName: String_WhereInput
    role: String_WhereInput
    phoneNumber: String_WhereInput
    settings: UserSettings_WhereInput
    posts: UserPost_WhereInput
    regions: Region_WhereInput
}

input User_CreateDataInput {
    id: String
    createdAt: DateTime
    updatedAt: DateTime
    email: String!
    password: String!
    firstName: String
    lastName: String
    role: String
    phoneNumber: String
    settings: UserSettings_Without_User_ConnectionInput
    posts: UserPost_Without_User_ConnectionManyInput
    regions: Region_Without_User_ConnectionManyInput
}

input User_UpdateDataInput {
    id: String
    createdAt: DateTime
    updatedAt: DateTime
    email: String
    password: String
    firstName: String
    lastName: String
    role: String
    phoneNumber: String
    settings: UserSettings_Without_User_ConnectionInput
    posts: UserPost_Without_User_ConnectionInput
    regions: Region_Without_User_ConnectionInput
}

input User_Without_UserSettings_CreateOrConnectInput {
    connect: [User_WhereUnfilteredUniqueInput]!
    create: [User_Without_UserSettings_CreateInput]!
}

input User_Without_UserSettings_CreateInput {
    id: String
    createdAt: DateTime
    updatedAt: DateTime
    email: String!
    password: String!
    firstName: String
    lastName: String
    role: String
    phoneNumber: String
    posts: UserPost_Without_User_ConnectionManyInput
    regions: Region_Without_User_ConnectionManyInput
}

input User_Without_UserSettings_ConnectionManyInput {
    create: [User_Without_UserSettings_CreateInput]
    connectOrCreate: User_Without_UserSettings_CreateOrConnectInput
    connect: [User_WhereUnfilteredUniqueInput]
}

input User_Without_UserSettings_ConnectionInput {
    create: User_Without_UserSettings_CreateInput
    connectOrCreate: User_Without_UserSettings_CreateOrConnectInput
    connect: User_WhereUnfilteredUniqueInput
}

input User_Without_UserPost_CreateOrConnectInput {
    connect: [User_WhereUnfilteredUniqueInput]!
    create: [User_Without_UserPost_CreateInput]!
}

input User_Without_UserPost_CreateInput {
    id: String
    createdAt: DateTime
    updatedAt: DateTime
    email: String!
    password: String!
    firstName: String
    lastName: String
    role: String
    phoneNumber: String
    settings: UserSettings_Without_User_ConnectionInput
    regions: Region_Without_User_ConnectionManyInput
}

input User_Without_UserPost_ConnectionManyInput {
    create: [User_Without_UserPost_CreateInput]
    connectOrCreate: User_Without_UserPost_CreateOrConnectInput
    connect: [User_WhereUnfilteredUniqueInput]
}

input User_Without_UserPost_ConnectionInput {
    create: User_Without_UserPost_CreateInput
    connectOrCreate: User_Without_UserPost_CreateOrConnectInput
    connect: User_WhereUnfilteredUniqueInput
}

input User_Without_Region_CreateOrConnectInput {
    connect: [User_WhereUnfilteredUniqueInput]!
    create: [User_Without_Region_CreateInput]!
}

input User_Without_Region_CreateInput {
    id: String
    createdAt: DateTime
    updatedAt: DateTime
    email: String!
    password: String!
    firstName: String
    lastName: String
    role: String
    phoneNumber: String
    settings: UserSettings_Without_User_ConnectionInput
    posts: UserPost_Without_User_ConnectionManyInput
}

input User_Without_Region_ConnectionManyInput {
    create: [User_Without_Region_CreateInput]
    connectOrCreate: User_Without_Region_CreateOrConnectInput
    connect: [User_WhereUnfilteredUniqueInput]
}

input User_Without_Region_ConnectionInput {
    create: User_Without_Region_CreateInput
    connectOrCreate: User_Without_Region_CreateOrConnectInput
    connect: User_WhereUnfilteredUniqueInput
}

type Region {
    createdAt: DateTime!
    updatedAt: DateTime!
    regionName: ID!
    users: [User]!
}

type Region_Output {
    # Total count of items found or modified.
    # This count is not affected by pagination (it always counts all results).
    total: Int!
    items: [Region!]!
    messages: [OutputMessage]!
}

input Region_WhereInput {
    AND: [Region_WhereInput!]
    OR: [Region_WhereInput!]
    NOT: [Region_WhereInput!]
    createdAt: DateTime_WhereInput
    updatedAt: DateTime_WhereInput
    regionName: ID_WhereInput
    users: User_WhereManyInput
}

input Region_OrderByInput {
    createdAt: SortOrder
    updatedAt: SortOrder
    regionName: SortOrder
    users: OrderByCount
}

input Region_WhereUnfilteredUniqueInput {
    AND: [Region_WhereInput!]
    OR: [Region_WhereInput!]
    NOT: [Region_WhereInput!]
    createdAt: DateTime_WhereInput
    updatedAt: DateTime_WhereInput
    regionName: String
    users: User_WhereManyInput
}

input Region_WhereManyInput {
    every: Region_WhereInput
    none: Region_WhereInput
    some: Region_WhereInput
}

input Region_CreateInput {
    data: [Region_CreateDataInput!]!
}

input Region_UpdateInput {
    data: Region_UpdateDataInput!
    where: Region_WhereUnfilteredUniqueInput!
}

input Region_UpsertInput {
    data: Region_UpdateDataInput!
    where: Region_WhereRequiredProvidedUniqueInput!
}

input Region_DeleteInput {
    where: Region_WhereInput!
}

input Region_WhereRequiredProvidedUniqueInput {
    createdAt: DateTime_WhereInput
    updatedAt: DateTime_WhereInput
    regionName: String!
    users: User_WhereInput
}

input Region_CreateDataInput {
    createdAt: DateTime
    updatedAt: DateTime
    regionName: String!
    users: User_Without_Region_ConnectionManyInput
}

input Region_UpdateDataInput {
    createdAt: DateTime
    updatedAt: DateTime
    regionName: String
    users: User_Without_Region_ConnectionInput
}

input Region_Without_User_CreateOrConnectInput {
    connect: [Region_WhereUnfilteredUniqueInput]!
    create: [Region_Without_User_CreateInput]!
}

input Region_Without_User_CreateInput {
    createdAt: DateTime
    updatedAt: DateTime
    regionName: String!
}

input Region_Without_User_ConnectionManyInput {
    create: [Region_Without_User_CreateInput]
    connectOrCreate: Region_Without_User_CreateOrConnectInput
    connect: [Region_WhereUnfilteredUniqueInput]
}

input Region_Without_User_ConnectionInput {
    create: Region_Without_User_CreateInput
    connectOrCreate: Region_Without_User_CreateOrConnectInput
    connect: Region_WhereUnfilteredUniqueInput
}

type UserPost {
    id: ID!
    createdAt: DateTime!
    updatedAt: DateTime!
    title: String!
    body: String!
    user: User!
}

type UserPost_Output {
    # Total count of items found or modified.
    # This count is not affected by pagination (it always counts all results).
    total: Int!
    items: [UserPost!]!
    messages: [OutputMessage]!
}

input UserPost_WhereInput {
    AND: [UserPost_WhereInput!]
    OR: [UserPost_WhereInput!]
    NOT: [UserPost_WhereInput!]
    id: ID_WhereInput
    createdAt: DateTime_WhereInput
    updatedAt: DateTime_WhereInput
    title: String_WhereInput
    body: String_WhereInput
    user: User_WhereInput
}

input UserPost_OrderByInput {
    id: SortOrder
    createdAt: SortOrder
    updatedAt: SortOrder
    title: SortOrder
    body: SortOrder
    user: User_OrderByInput
}

input UserPost_WhereUnfilteredUniqueInput {
    AND: [UserPost_WhereInput!]
    OR: [UserPost_WhereInput!]
    NOT: [UserPost_WhereInput!]
    id: String
    createdAt: DateTime_WhereInput
    updatedAt: DateTime_WhereInput
    title: String_WhereInput
    body: String_WhereInput
    user: User_WhereInput
}

input UserPost_WhereManyInput {
    every: UserPost_WhereInput
    none: UserPost_WhereInput
    some: UserPost_WhereInput
}

input UserPost_CreateInput {
    data: [UserPost_CreateDataInput!]!
}

input UserPost_UpdateInput {
    data: UserPost_UpdateDataInput!
    where: UserPost_WhereUnfilteredUniqueInput!
}

input UserPost_UpsertInput {
    data: UserPost_UpdateDataInput!
    where: UserPost_WhereRequiredProvidedUniqueInput!
}

input UserPost_DeleteInput {
    where: UserPost_WhereInput!
}

input UserPost_WhereRequiredProvidedUniqueInput {
    id: String!
    createdAt: DateTime_WhereInput
    updatedAt: DateTime_WhereInput
    title: String_WhereInput
    body: String_WhereInput
    user: User_WhereInput
}

input UserPost_CreateDataInput {
    id: String
    createdAt: DateTime
    updatedAt: DateTime
    title: String!
    body: String!
    user: User_Without_UserPost_ConnectionInput!
}

input UserPost_UpdateDataInput {
    id: String
    createdAt: DateTime
    updatedAt: DateTime
    title: String
    body: String
    user: User_Without_UserPost_ConnectionInput
}

input UserPost_Without_User_CreateOrConnectInput {
    connect: [UserPost_WhereUnfilteredUniqueInput]!
    create: [UserPost_Without_User_CreateInput]!
}

input UserPost_Without_User_CreateInput {
    id: String
    createdAt: DateTime
    updatedAt: DateTime
    title: String!
    body: String!
}

input UserPost_Without_User_ConnectionManyInput {
    create: [UserPost_Without_User_CreateInput]
    connectOrCreate: UserPost_Without_User_CreateOrConnectInput
    connect: [UserPost_WhereUnfilteredUniqueInput]
}

input UserPost_Without_User_ConnectionInput {
    create: UserPost_Without_User_CreateInput
    connectOrCreate: UserPost_Without_User_CreateOrConnectInput
    connect: UserPost_WhereUnfilteredUniqueInput
}

type UserSettings {
    id: ID!
    createdAt: DateTime!
    updatedAt: DateTime!
    receivesMarketingEmails: Boolean!
    canViewReports: Boolean!
    stats: UserStats
    user: User!
}

type UserSettings_Output {
    # Total count of items found or modified.
    # This count is not affected by pagination (it always counts all results).
    total: Int!
    items: [UserSettings!]!
    messages: [OutputMessage]!
}

input UserSettings_WhereInput {
    AND: [UserSettings_WhereInput!]
    OR: [UserSettings_WhereInput!]
    NOT: [UserSettings_WhereInput!]
    id: ID_WhereInput
    createdAt: DateTime_WhereInput
    updatedAt: DateTime_WhereInput
    receivesMarketingEmails: Boolean_WhereInput
    canViewReports: Boolean_WhereInput
    stats: UserStats_WhereInput
    user: User_WhereInput
}

input UserSettings_OrderByInput {
    id: SortOrder
    createdAt: SortOrder
    updatedAt: SortOrder
    receivesMarketingEmails: SortOrder
    canViewReports: SortOrder
    stats: UserStats_OrderByInput
    user: User_OrderByInput
}

input UserSettings_WhereUnfilteredUniqueInput {
    AND: [UserSettings_WhereInput!]
    OR: [UserSettings_WhereInput!]
    NOT: [UserSettings_WhereInput!]
    id: String
    createdAt: DateTime_WhereInput
    updatedAt: DateTime_WhereInput
    receivesMarketingEmails: Boolean_WhereInput
    canViewReports: Boolean_WhereInput
    stats: UserStats_WhereInput
    user: User_WhereInput
}

input Boolean_WhereInput {
    not: Boolean
    equals: Boolean
}

input UserSettings_WhereManyInput {
    every: UserSettings_WhereInput
    none: UserSettings_WhereInput
    some: UserSettings_WhereInput
}

input UserSettings_CreateInput {
    data: [UserSettings_CreateDataInput!]!
}

input UserSettings_UpdateInput {
    data: UserSettings_UpdateDataInput!
    where: UserSettings_WhereUnfilteredUniqueInput!
}

input UserSettings_UpsertInput {
    data: UserSettings_UpdateDataInput!
    where: UserSettings_WhereRequiredProvidedUniqueInput!
}

input UserSettings_DeleteInput {
    where: UserSettings_WhereInput!
}

input UserSettings_WhereRequiredProvidedUniqueInput {
    id: String!
    createdAt: DateTime_WhereInput
    updatedAt: DateTime_WhereInput
    receivesMarketingEmails: Boolean_WhereInput
    canViewReports: Boolean_WhereInput
    stats: UserStats_WhereInput
    user: User_WhereInput
}

input UserSettings_CreateDataInput {
    id: String
    createdAt: DateTime
    updatedAt: DateTime
    receivesMarketingEmails: Boolean
    canViewReports: Boolean
    stats: UserStats_Without_UserSettings_ConnectionInput
    user: User_Without_UserSettings_ConnectionInput!
}

input UserSettings_UpdateDataInput {
    id: String
    createdAt: DateTime
    updatedAt: DateTime
    receivesMarketingEmails: Boolean
    canViewReports: Boolean
    stats: UserStats_Without_UserSettings_ConnectionInput
    user: User_Without_UserSettings_ConnectionInput
}

input UserSettings_Without_UserStats_CreateOrConnectInput {
    connect: [UserSettings_WhereUnfilteredUniqueInput]!
    create: [UserSettings_Without_UserStats_CreateInput]!
}

input UserSettings_Without_UserStats_CreateInput {
    id: String
    createdAt: DateTime
    updatedAt: DateTime
    receivesMarketingEmails: Boolean
    canViewReports: Boolean
    user: User_Without_UserSettings_ConnectionInput!
}

input UserSettings_Without_UserStats_ConnectionManyInput {
    create: [UserSettings_Without_UserStats_CreateInput]
    connectOrCreate: UserSettings_Without_UserStats_CreateOrConnectInput
    connect: [UserSettings_WhereUnfilteredUniqueInput]
}

input UserSettings_Without_UserStats_ConnectionInput {
    create: UserSettings_Without_UserStats_CreateInput
    connectOrCreate: UserSettings_Without_UserStats_CreateOrConnectInput
    connect: UserSettings_WhereUnfilteredUniqueInput
}

input UserSettings_Without_User_CreateOrConnectInput {
    connect: [UserSettings_WhereUnfilteredUniqueInput]!
    create: [UserSettings_Without_User_CreateInput]!
}

input UserSettings_Without_User_CreateInput {
    id: String
    createdAt: DateTime
    updatedAt: DateTime
    receivesMarketingEmails: Boolean
    canViewReports: Boolean
    stats: UserStats_Without_UserSettings_ConnectionInput
}

input UserSettings_Without_User_ConnectionManyInput {
    create: [UserSettings_Without_User_CreateInput]
    connectOrCreate: UserSettings_Without_User_CreateOrConnectInput
    connect: [UserSettings_WhereUnfilteredUniqueInput]
}

input UserSettings_Without_User_ConnectionInput {
    create: UserSettings_Without_User_CreateInput
    connectOrCreate: UserSettings_Without_User_CreateOrConnectInput
    connect: UserSettings_WhereUnfilteredUniqueInput
}

type UserStats {
    id: ID!
    createdAt: DateTime!
    updatedAt: DateTime!
    likes: Int!
    dislikes: Int!
    views: Int!
    settings: UserSettings!
}

type UserStats_Output {
    # Total count of items found or modified.
    # This count is not affected by pagination (it always counts all results).
    total: Int!
    items: [UserStats!]!
    messages: [OutputMessage]!
}

input UserStats_WhereInput {
    AND: [UserStats_WhereInput!]
    OR: [UserStats_WhereInput!]
    NOT: [UserStats_WhereInput!]
    id: ID_WhereInput
    createdAt: DateTime_WhereInput
    updatedAt: DateTime_WhereInput
    likes: Int_WhereInput
    dislikes: Int_WhereInput
    views: Int_WhereInput
    settings: UserSettings_WhereInput
}

input UserStats_OrderByInput {
    id: SortOrder
    createdAt: SortOrder
    updatedAt: SortOrder
    likes: SortOrder
    dislikes: SortOrder
    views: SortOrder
    settings: UserSettings_OrderByInput
}

input UserStats_WhereUnfilteredUniqueInput {
    AND: [UserStats_WhereInput!]
    OR: [UserStats_WhereInput!]
    NOT: [UserStats_WhereInput!]
    id: String
    createdAt: DateTime_WhereInput
    updatedAt: DateTime_WhereInput
    likes: Int_WhereInput
    dislikes: Int_WhereInput
    views: Int_WhereInput
    settings: UserSettings_WhereInput
}

input Int_WhereInput {
    equals: Int
    in: [Int!]
    notIn: [Int!]
    lt: Int
    lte: Int
    gt: Int
    gte: Int
    not: Int_WhereInput
}

input UserStats_WhereManyInput {
    every: UserStats_WhereInput
    none: UserStats_WhereInput
    some: UserStats_WhereInput
}

input UserStats_CreateInput {
    data: [UserStats_CreateDataInput!]!
}

input UserStats_UpdateInput {
    data: UserStats_UpdateDataInput!
    where: UserStats_WhereUnfilteredUniqueInput!
}

input UserStats_UpsertInput {
    data: UserStats_UpdateDataInput!
    where: UserStats_WhereRequiredProvidedUniqueInput!
}

input UserStats_DeleteInput {
    where: UserStats_WhereInput!
}

input UserStats_WhereRequiredProvidedUniqueInput {
    id: String!
    createdAt: DateTime_WhereInput
    updatedAt: DateTime_WhereInput
    likes: Int_WhereInput
    dislikes: Int_WhereInput
    views: Int_WhereInput
    settings: UserSettings_WhereInput
}

input UserStats_CreateDataInput {
    id: String
    createdAt: DateTime
    updatedAt: DateTime
    likes: Int!
    dislikes: Int!
    views: Int!
    settings: UserSettings_Without_UserStats_ConnectionInput!
}

input UserStats_UpdateDataInput {
    id: String
    createdAt: DateTime
    updatedAt: DateTime
    likes: Int
    dislikes: Int
    views: Int
    settings: UserSettings_Without_UserStats_ConnectionInput
}

input UserStats_Without_UserSettings_CreateOrConnectInput {
    connect: [UserStats_WhereUnfilteredUniqueInput]!
    create: [UserStats_Without_UserSettings_CreateInput]!
}

input UserStats_Without_UserSettings_CreateInput {
    id: String
    createdAt: DateTime
    updatedAt: DateTime
    likes: Int!
    dislikes: Int!
    views: Int!
}

input UserStats_Without_UserSettings_ConnectionManyInput {
    create: [UserStats_Without_UserSettings_CreateInput]
    connectOrCreate: UserStats_Without_UserSettings_CreateOrConnectInput
    connect: [UserStats_WhereUnfilteredUniqueInput]
}

input UserStats_Without_UserSettings_ConnectionInput {
    create: UserStats_Without_UserSettings_CreateInput
    connectOrCreate: UserStats_Without_UserSettings_CreateOrConnectInput
    connect: UserStats_WhereUnfilteredUniqueInput
}
