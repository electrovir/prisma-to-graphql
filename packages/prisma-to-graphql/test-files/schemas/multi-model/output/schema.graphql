# generated by prisma-to-graphql

type Mutation {
    Users(
        create: User_CreateInput
        update: User_UpdateInput
        upsert: User_UpsertInput
        delete: User_DeleteInput
    ): User_Output!
    Companies(
        create: Company_CreateInput
        update: Company_UpdateInput
        upsert: Company_UpsertInput
        delete: Company_DeleteInput
    ): Company_Output!
}

type Query {
    Users(
        where: User_WhereInput
        orderBy: [User_OrderByInput!]
        cursor: User_WhereUnfilteredUniqueInput
        distinct: [User_DistinctInput!]
        take: Int
    ): User_Output!
    Companies(
        where: Company_WhereInput
        orderBy: [Company_OrderByInput!]
        cursor: Company_WhereUnfilteredUniqueInput
        distinct: [Company_DistinctInput!]
        take: Int
    ): Company_Output!
}

scalar DateTime

enum SortOrder {
    asc
    desc
}

enum NullsOrder {
    first
    last
}

enum User_DistinctInput {
    id
    createdAt
    updatedAt
    email
    password
    firstName
    lastName
    role
    phoneNumber
}

enum Company_DistinctInput {
    id
    createdAt
    updatedAt
    name
}

type _AllModels {
    User: User
    Company: Company
}

type User {
    id: ID!
    createdAt: DateTime!
    updatedAt: DateTime!
    email: String!
    password: String!
    firstName: String
    lastName: String
    role: String
    phoneNumber: String
}

input SortOrderWithNulls {
    sort: SortOrder!
    nulls: NullsOrder
}

type User_Output {
    # Total count of items found or modified.
    # This count is not affected by pagination (it always counts all results).
    total: Int!
    items: [User!]!
    messages: [OutputMessage]!
}

type OutputMessage {
    code: String!
    message: String!
    description: String!
}

input OrderByCount {
    _count: SortOrder
}

input User_WhereInput {
    AND: [User_WhereInput!]
    OR: [User_WhereInput!]
    NOT: [User_WhereInput!]
    id: ID_WhereInput
    createdAt: DateTime_WhereInput
    updatedAt: DateTime_WhereInput
    email: String_WhereInput
    password: String_WhereInput
    firstName: String_WhereInput
    lastName: String_WhereInput
    role: String_WhereInput
    phoneNumber: String_WhereInput
}

input User_OrderByInput {
    id: SortOrder
    createdAt: SortOrder
    updatedAt: SortOrder
    email: SortOrder
    password: SortOrder
    firstName: SortOrderWithNulls
    lastName: SortOrderWithNulls
    role: SortOrderWithNulls
    phoneNumber: SortOrderWithNulls
}

input User_WhereUnfilteredUniqueInput {
    AND: [User_WhereInput!]
    OR: [User_WhereInput!]
    NOT: [User_WhereInput!]
    id: String
    createdAt: DateTime_WhereInput
    updatedAt: DateTime_WhereInput
    email: String_WhereInput
    password: String_WhereInput
    firstName: String_WhereInput
    lastName: String_WhereInput
    role: String_WhereInput
    phoneNumber: String_WhereInput
}

input ID_WhereInput {
    equals: ID
    in: [ID!]
    notIn: [ID!]
    lt: ID
    lte: ID
    gt: ID
    gte: ID
    not: ID_WhereInput
    contains: ID
    startsWith: ID
    endsWith: ID
}

input DateTime_WhereInput {
    equals: DateTime
    in: [DateTime!]
    notIn: [DateTime!]
    lt: DateTime
    lte: DateTime
    gt: DateTime
    gte: DateTime
    not: DateTime_WhereInput
}

input String_WhereInput {
    equals: String
    in: [String!]
    notIn: [String!]
    lt: String
    lte: String
    gt: String
    gte: String
    not: String_WhereInput
    contains: String
    startsWith: String
    endsWith: String
}

input User_WhereManyInput {
    every: User_WhereInput
    none: User_WhereInput
    some: User_WhereInput
}

input User_CreateInput {
    data: [User_CreateDataInput!]!
}

input User_UpdateInput {
    data: User_UpdateDataInput!
    where: User_WhereUnfilteredUniqueInput!
}

input User_UpsertInput {
    data: User_UpdateDataInput!
    where: User_WhereRequiredProvidedUniqueInput!
}

input User_DeleteInput {
    where: User_WhereInput!
}

input User_WhereRequiredProvidedUniqueInput {
    id: String!
    createdAt: DateTime_WhereInput
    updatedAt: DateTime_WhereInput
    email: String_WhereInput
    password: String_WhereInput
    firstName: String_WhereInput
    lastName: String_WhereInput
    role: String_WhereInput
    phoneNumber: String_WhereInput
}

input User_CreateDataInput {
    id: String
    createdAt: DateTime
    updatedAt: DateTime
    email: String!
    password: String!
    firstName: String
    lastName: String
    role: String
    phoneNumber: String
}

input User_UpdateDataInput {
    id: String
    createdAt: DateTime
    updatedAt: DateTime
    email: String
    password: String
    firstName: String
    lastName: String
    role: String
    phoneNumber: String
}

type Company {
    id: ID!
    createdAt: DateTime!
    updatedAt: DateTime!
    name: String!
}

type Company_Output {
    # Total count of items found or modified.
    # This count is not affected by pagination (it always counts all results).
    total: Int!
    items: [Company!]!
    messages: [OutputMessage]!
}

input Company_WhereInput {
    AND: [Company_WhereInput!]
    OR: [Company_WhereInput!]
    NOT: [Company_WhereInput!]
    id: ID_WhereInput
    createdAt: DateTime_WhereInput
    updatedAt: DateTime_WhereInput
    name: String_WhereInput
}

input Company_OrderByInput {
    id: SortOrder
    createdAt: SortOrder
    updatedAt: SortOrder
    name: SortOrder
}

input Company_WhereUnfilteredUniqueInput {
    AND: [Company_WhereInput!]
    OR: [Company_WhereInput!]
    NOT: [Company_WhereInput!]
    id: String
    createdAt: DateTime_WhereInput
    updatedAt: DateTime_WhereInput
    name: String_WhereInput
}

input Company_WhereManyInput {
    every: Company_WhereInput
    none: Company_WhereInput
    some: Company_WhereInput
}

input Company_CreateInput {
    data: [Company_CreateDataInput!]!
}

input Company_UpdateInput {
    data: Company_UpdateDataInput!
    where: Company_WhereUnfilteredUniqueInput!
}

input Company_UpsertInput {
    data: Company_UpdateDataInput!
    where: Company_WhereRequiredProvidedUniqueInput!
}

input Company_DeleteInput {
    where: Company_WhereInput!
}

input Company_WhereRequiredProvidedUniqueInput {
    id: String!
    createdAt: DateTime_WhereInput
    updatedAt: DateTime_WhereInput
    name: String_WhereInput
}

input Company_CreateDataInput {
    id: String
    createdAt: DateTime
    updatedAt: DateTime
    name: String!
}

input Company_UpdateDataInput {
    id: String
    createdAt: DateTime
    updatedAt: DateTime
    name: String
}
