import {type AnyFunction} from '@augment-vir/common';
import {type OperationType} from '@prisma-to-graphql/core';
import {type GraphQLResolveInfo} from 'graphql';
import {type EmptyObject, type IsNever} from 'type-fest';

/**
 * Extracts all available and supported operation types from the given Resolvers type.
 *
 * @category Internal Type Transforms
 */
export type AvailableOperationTypes<Resolvers extends Readonly<BaseResolvers>> = Extract<
    keyof Required<Resolvers>,
    OperationType
>;

/**
 * Base resolver type used by `BaseResolvers` and expected to be overridden by the user's generated
 * `Resolvers` type that they should provide.
 *
 * @category Internal Type Transforms
 */
export type BaseResolver<TResult = any, TParent = any, TContext = any, TArgs = any> = (
    parent: TParent,
    args: TArgs,
    context: TContext,
    info: GraphQLResolveInfo,
) => Promise<TResult> | TResult;

/**
 * The base type expected for Resolvers types needed by many of these internal type transforms. This
 * type is generated by `prisma-to-graphql` and is needed to construct a strictly-typed
 * `fetchGraphql` function.
 *
 * @category Internal Type Transforms
 */
export type BaseResolvers = Partial<
    Record<OperationType, Record<string, BaseResolver | {resolve: BaseResolver}>>
>;

/**
 * Extracts all available resolver names for the given operation type from the given Resolvers type.
 *
 * @category Internal Type Transforms
 */
export type AvailableResolverNames<
    Resolvers extends Readonly<BaseResolvers>,
    OperationType extends AvailableOperationTypes<Resolvers>,
> =
    IsNever<AvailableOperationTypes<Resolvers>> extends true
        ? never
        : IsNever<OperationType> extends true
          ? never
          : EmptyObject extends Required<Resolvers>[OperationType]
            ? never
            : keyof Required<Resolvers>[OperationType];

/**
 * Extracts the arguments for a given resolver.
 *
 * @category Internal Type Transforms
 */
export type ResolverArgs<
    Resolvers extends Readonly<BaseResolvers>,
    OperationType extends AvailableOperationTypes<Resolvers>,
    ResolverName extends AvailableResolverNames<Resolvers, OperationType>,
> = Parameters<
    Extract<NonNullable<NonNullable<Resolvers[OperationType]>[ResolverName]>, AnyFunction>
>[1];

/**
 * Maps a resolver to its required inputs.
 *
 * @category Internal Type Transforms
 */
export type ResolverInputs<
    Resolvers extends Readonly<BaseResolvers>,
    OperationType extends AvailableOperationTypes<Resolvers>,
    ResolverName extends AvailableResolverNames<Resolvers, OperationType>,
> =
    EmptyObject extends ResolverArgs<Resolvers, OperationType, ResolverName>
        ? never
        : IsNever<ResolverArgs<Resolvers, OperationType, ResolverName>> extends true
          ? never
          : ResolverArgs<Resolvers, OperationType, ResolverName>;

/**
 * Maps a resolver to its output type.
 *
 * @category Internal Type Transforms
 */
export type ResolverOutput<
    Resolvers extends Readonly<BaseResolvers>,
    OperationType extends AvailableOperationTypes<Resolvers>,
    ResolverName extends AvailableResolverNames<Resolvers, OperationType>,
> = Awaited<
    ReturnType<
        Extract<NonNullable<NonNullable<Resolvers[OperationType]>[ResolverName]>, AnyFunction>
    >
>;
